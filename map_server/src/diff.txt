--- map_saver.cpp	2017-06-05 14:13:14.494803399 +0800
+++ multi_map_saver.cpp	2017-07-11 18:25:38.335029556 +0800
@@ -26,6 +26,17 @@
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
+
+
+/**
+# @Date    : 2017-07-11 16:44:33
+# @Author  : Jian Jiao (jim1949@163.com)
+# @Link    : http://github.com/jim1949
+# @Version : 2
+
+*Here  we change the code from map_saver to save the map frequently to the server.(default frequency is 1 HZ).
+
+
  */
 
 #include <cstdio>
@@ -34,6 +45,8 @@
 #include "nav_msgs/GetMap.h"
 #include "tf/LinearMath/Matrix3x3.h"
 #include "geometry_msgs/Quaternion.h"
+#include "std_msgs/Int32.h"
+#include <sstream>
 
 using namespace std;
  
@@ -49,6 +62,7 @@
       ros::NodeHandle n;
       ROS_INFO("Waiting for the map");
       map_sub_ = n.subscribe("map", 1, &MapGenerator::mapCallback, this);
+      // map_status_pub_=n.advertise<std_msgs::Int32>("map_status", 100);
     }
 
     void mapCallback(const nav_msgs::OccupancyGridConstPtr& map)
@@ -60,6 +74,7 @@
 
 
       std::string mapdatafile = mapname_ + ".pgm";
+      
       ROS_INFO("Writing map occupancy data to %s", mapdatafile.c_str());
       FILE* out = fopen(mapdatafile.c_str(), "w");
       if (!out)
@@ -111,12 +126,18 @@
 
       fclose(yaml);
 
+      // std_msgs::Int32 msg;
+      // //The message of 1 represents the map is drawn already.
+      // msg.data=1;
+      // map_status_pub_.publish(msg);
+      // msg.data=0;
       ROS_INFO("Done\n");
       saved_map_ = true;
     }
 
     std::string mapname_;
     ros::Subscriber map_sub_;
+    // ros::Publisher map_status_pub_;
     bool saved_map_;
 
 };
@@ -128,7 +149,9 @@
 int main(int argc, char** argv) 
 {
   ros::init(argc, argv, "map_saver");
-  std::string mapname = "map";
+  std::string mapname = "/var/www/map";
+  ros::Rate loop_rate(1);
+  int count=1;
 
   for(int i=1; i<argc; i++)
   {
@@ -156,12 +179,19 @@
 
   if(*mapname.rbegin() == '/')
     mapname += "map";
-  
+  printf(mapname.c_str());
+  while(ros::ok())
+  {
   MapGenerator mg(mapname);
 
-  while(!mg.saved_map_ && ros::ok())
+  while(!mg.saved_map_ )
     ros::spinOnce();
 
+      loop_rate.sleep();
+      printf("Count:%d",count++);
+}
+
+
   return 0;
 }
 
